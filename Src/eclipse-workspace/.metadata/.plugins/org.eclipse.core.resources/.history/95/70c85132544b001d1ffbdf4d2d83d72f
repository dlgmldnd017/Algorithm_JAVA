package Dynamic_Programing_1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class NUMB3RS_1 {
	private static BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));
	private static StringBuilder sb = new StringBuilder();
	
	// 각각 마을의 수, 지난 일수, 교도소가 있는 마을 변수
	private static int N, D, P;
	
	// 마을 i와 j가 연결되어 있는지 확인하는 행렬 변수
	private static int[][] A;
	
	// 마을 i와 연결된 마을의 수 변수
	private static int[] deg;
	
	// 각각 계산할 마을의 수와 T개의 정수로 확률을 계산할 마을의 번호 변수들
	private static int T;
	private static int[] Q;
	
	private static int[][] cache;
	
	public static void main(String[] args) throws IOException {
		StringTokenizer st;
		int C = Integer.parseInt(sc.readLine());
		
		for(int i=0; i<C; i++) {
			cache = new int[101][101];
			
			st = new StringTokenizer(sc.readLine());
			N = Integer.parseInt(st.nextToken());
			D = Integer.parseInt(st.nextToken());
			P = Integer.parseInt(st.nextToken());
			
			// y와 x가 서로 연결되었는 지 확인하는 과정
			// 0이면 연결되지 않았고 1이면 연결되어 있다.
			A = new int[51][51];
			deg = new int[51];
			for(int y=0; y<N; y++) {
				st = new StringTokenizer(sc.readLine());
				for(int x=0; x<N; x++) {
					A[y][x] = Integer.parseInt(st.nextToken());
					
					// 만약 마을과 연결되었다면 deg[y]++
					if(A[y][x]==1) {
						deg[y]++;
					}
				}
			}
			
			T = Integer.parseInt(sc.readLine());
			Q = new int[T];
			
			st = new StringTokenizer(sc.readLine());
			for(int y=0; y<T; y++) {
				Q[y] = Integer.parseInt(st.nextToken());
			}
			
			for(int y=0; y<T; y++) {
				sb.append(solve(new ArrayList<>(), y));
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}
	
	private static double solve(ArrayList<Integer> path, int i) {
		if(path.size()==D+1) {
			if(path.get(path.size())!=Q[i]) return 0.0;
			
			double ret = 1.0;
			for(int y=0; y+1<path.size(); y++) {
				
			}
		}
		
		double ret=0;
		
		return ret;
	}
}