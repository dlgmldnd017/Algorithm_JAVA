package Full_Search;

// 문제 설명1: 학생들을 두 명씩 짝 지어 목록을 만들고자 한다.
// 문제 설명2: 단, 항상 서로가 친구인 학생들끼리만 짞을 지어야 한다.
// 문제 설명3: 구할 수 있는 모든 경우의 수를 만들어보자.

// 주의: (a,b) (c,d) (e,f)와 (a,b) (c,e) (d,f)는 서로 다른 방법이다.

public class PICNIC {
	static int n = 6;
	static boolean[][] areFriends = {
			{false, true, true, false, false, false},
			{false, false, true, true, true, false},
			{false, false, false, true, true, false},
			{false, false, false, false, true, true},
			{false, false, false, false, false, true}
	};
	
	public static void main(String[] args) {
		int ret = countPairings(new boolean[n]);
		System.out.print("모든 경우의 수는 " + ret + " 입니다.");
	}
	
	public static int countPairings(boolean taken[]){
		int firstFree = -1;
		
		for(int i=0; i<n; i++) {
			if(!taken[i]) {
				firstFree = i;
				break;
			}
		}
		if(firstFree == -1) {
			return 1;
		}
		
		int ret =0;
		for(int pairWith = firstFree+1; pairWith<n; pairWith++) {
			taken[firstFree] = taken[pairWith] = true;
			ret += countPairings(taken);
			taken[firstFree] = taken[pairWith] = false;
		}
		
		return ret;
	}
}