package DivideConQ;

import java.util.Scanner;

public class MatrixPow {
	// 결과 값을 1000으로 나눈 나머지를 출력하기 위해 모듈 변수
	final static int MOD = 1000;
	
	// 입력값을 위한 변수
	static int N;
	static long B;
	static int matrix[][];
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		System.out.print("N: ");
		N = sc.nextInt();
		
		System.out.print("B: ");
		B = sc.nextLong();
		System.out.println();
		
		// 거듭 제곱을 위한 정방 행렬
		matrix = new int[N][N];
		
		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				matrix[i][j] = sc.nextInt() % 1000;
			}
		}
		
		int[][] result = pow(matrix, B);
		
		StringBuilder sb = new StringBuilder();
		
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				sb.append(result[i][j]).append(' ');
			}
			sb.append('\n');
		}
		System.out.println(sb);
	}
	
	// 행렬 제곱 분할정복 메소드
		public static int[][] pow(int[][] A, long b) {
	 
			// 지수가 1일 땐 A를 return한다.
			if(b == 1L) {
				return A;
			}
			
			// 지수를 절반으로 분할하여 재귀호출
			int[][] ret = pow(A, b/ 2);
			
			// 하위 재귀에서 얻은 행렬을 제곱해준다.
			ret = multiply(ret, ret);
			
			// 만약 지수가 홀수라면 마지막에  A^1 (origin)을 곱해준다.
			if(b % 2 == 1L) {
				ret = multiply(ret, matrix);
			}
			
			return ret;
		}
		// o1과 o2 행렬을 곱해주는 메소드
		public static int[][] multiply(int[][] o1, int[][] o2) {
			
			int[][] ret = new int[N][N];
			
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					for(int k = 0; k < N; k++) {
						
						ret[i][j] += o1[i][k] * o2[k][j];
						ret[i][j] %= MOD;	// 행렬 원소 연산이 끝나면 MOD로 나머지연산
					}
				}
			}
			return ret;
		}
}